<?php
/**
 * Bold Payments PIGI iframe template.
 *
 * @var Bold_CheckoutPaymentBooster_Block_Payment_Form_Bold $this
 */
?>
<div id='payment_form_bold' style="display: none"></div>

<script type="text/javascript">
    /**
     * Bold order data sync class.
     */
    let BoldPaymentMethod = Class.create({
        paymentMethodElement: document.getElementById('p_method_bold').parentNode,
        paymentContainer: document.getElementById('bold-payments-container'),
        paymentCheckbox: document.getElementById('p_method_bold'),
        isAvailable: <?php echo $this->isAvailable(); ?>,
        isFastlaneAvailable: <?php echo $this->isFastlaneAvailable(); ?>,
        paymentId: null,
        /**
         * Initialize class.
         *
         * @returns {*|boolean}
         */
        initialize: async function () {
            if (!this.isAvailable) {
                this.hidePaymentMethod();
                return;
            }
            await this.waitForBaseInstance();
            await this.renderPaymentForm();
            this.subscribeToSpiEvents();
            this.waitForPaymentInitialization();
            this.waitForCheckoutInitialization();
            this.successUrl = '<?php echo $this->getUrl('checkout/onepage/success') ?>';
        },
        /**
         * Wait for base instance to be initialized.
         *
         * @return {Promise<unknown>}
         */
        waitForBaseInstance: function () {
            return new Promise((resolve) => {
                const intervalId = setInterval(() => {
                    if (typeof window.bold.baseInstance !== 'undefined') {
                        clearInterval(intervalId);
                        resolve();
                    }
                ],
                'callbacks': {
                    'onCreatePaymentOrder': async function (paymentType, paymentPayload) {
                        console.log('ON CREATE PAYMENT ORDER CALLBACK RECEIVED WITH DATA: ', paymentPayload);
                        if (paymentType !== 'ppcp') {
                            return;
                        }
                        const walletPayResult = await fetch(this.boldApiUrl + 'wallet_pay/create_order', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': 'Bearer ' + this.jwtToken,
                            },
                            body: JSON.stringify(paymentPayload),
                        });
                        if (walletPayResult.ok) {
                            console.log('Payment order created.');
                            const walletPayResultPayload = await walletPayResult.json();
                            return walletPayResultPayload.data
                        } else {
                            throw 'Unable to create wallet pay order';
                        }
                    }.bind(this),
                    'onUpdatePaymentOrder': async function () {
                        // We won't handle updating an order from PayPal data, we will disable address changes etc
                    }.bind(this),
                    'onApprovePaymentOrder': async function (paymentType, paymentInformation, paymentPayload) {
                        // A PayPal payment has been completed, we need to capture the payment ID and pass it through
                        if (paymentType !== 'ppcp') {
                            return;
                        }

                        if (!paymentInformation.payment_id) {
                            console.error('No payment ID provided from PayPal.');
                            return;
                        }

                        // Update the payment ID from PayPal
                        this.paymentId = paymentInformation.payment_id;

                        // Save the payment step to push the customer along
                        // payment.save();
                        if (checkout.loadWaiting!=false) return;
                        var validator = new Validation(payment.form);
                        if (payment.validate() && validator.validate()) {
                            checkout.setLoadWaiting('payment');
                            new Ajax.Request(
                                payment.saveUrl,
                                {
                                    method:'post',
                                    onComplete: function(){
                                        checkout.setLoadWaiting(false);
                                    }.bindAsEventListener(this),
                                    onSuccess: function(transport) {
                                        console.log('LOOKS LIKE WE GOT A PURMENT SUCCESS: ', transport);
                                        var response = transport.responseJSON || transport.responseText.evalJSON(true) || {};

                                        /*
                                         * if there is an error in payment, need to show error message
                                         */
                                        if (response.error) {
                                            if (response.fields) {
                                                var fields = response.fields.split(',');
                                                for (var i = 0; i < fields.length; i++) {
                                                    var field = null;
                                                    if (field = $(fields[i])) {
                                                        Validation.ajaxError(field, response.error);
                                                    }
                                                }
                                                return;
                                            }
                                            if (Object.isString(response.message)) {
                                                alert(response.message.stripTags().toString());
                                            } else {
                                                alert(response.error.stripTags().toString());
                                            }
                                            return;
                                        } else {
                                            console.log('NO PAYMENT ERRORS! SHOULD BE PROCEEDING...');
                                        }

                                        //if (checkout.loadWaiting!=false) return;
                                        // checkout.setLoadWaiting('review'); // This crashes because we removed the `setNextStep` call.
                                        var params = Form.serialize(payment.form); // This is correct.
                                        var agreementsForm = $('checkout-agreements');
                                        if (agreementsForm) {
                                            console.log('OKAY AGREEMENTS FORM');
                                            params += '&'+Form.serialize(agreementsForm);
                                        } else {
                                            console.log('NO AGREEMENTS FORM');
                                        }
                                        params.save = true;
                                        new Ajax.Request(
                                            '<?php echo $this->getUrl('checkout/onepage/saveOrder') ?>',
                                            {
                                                method:'post',
                                                parameters:params,
                                                onComplete: function(transport){
                                                    checkout.setLoadWaiting(false, this.isSuccess);
                                                }.bindAsEventListener(this),
                                                onSuccess: function(transport){
                                                    console.log('HEY HEY REVIEW SUCCESS RIGHT HERE: ', transport);
                                                    if (transport) {
                                                        var response = transport.responseJSON || transport.responseText.evalJSON(true) || {};

                                                        if (response.redirect) {
                                                            this.isSuccess = true;
                                                            console.log("REDIRECTING: ", response.redirect);
                                                            location.href = encodeURI(response.redirect);
                                                            return;
                                                        }
                                                        if (response.success) {
                                                            this.isSuccess = true;
                                                            console.log("IS SUCCESS: ", this.successUrl);
                                                            location.href = encodeURI(this.successUrl);
                                                        }
                                                        else{
                                                            var msg = response.error_messages;
                                                            if (Object.isArray(msg)) {
                                                                msg = msg.join("\n").stripTags().toString();
                                                            }
                                                            if (msg) {
                                                                alert(msg);
                                                            }
                                                        }

                                                        console.log('SOMETHING ELSE HAPPENED: ', response);

                                                        if (response.update_section) {
                                                            $('checkout-'+response.update_section.name+'-load').update(response.update_section.html);
                                                        }

                                                        if (response.goto_section) {
                                                            checkout.gotoSection(response.goto_section, true);
                                                        }
                                                    }
                                                }.bindAsEventListener(this),
                                                onFailure: checkout.ajaxFailure.bind(checkout)
                                            }
                                        );
                                    }.bindAsEventListener(this),
                                    onFailure: checkout.ajaxFailure.bind(checkout),
                                    parameters: Form.serialize(payment.form)
                                }
                            );
                        }

                        // Auto-place the order and direct to the thank-you page

                    }.bind(this),
                    'onScaPaymentOrder': async function (type, payload) {
                        const url = `${this.boldApiUrl}payments/on_sca`;
                        const orderId = payload.order_id;

                        if (type === 'ppcp') {
                            const scaResult = await fetch(url, {
                                method: 'POST',
                                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${this.jwtToken}`},
                                body: JSON.stringify({'order_id': orderId, 'public_order_id': '<?php echo $this->getPublicOrderID(); ?>'}),
                            });
                            if (!scaResult.ok) {
                                throw new Error('SCA failed');
                            }
                            const data = await scaResult.json();
                            return {card: data};

                        }
                        throw new Error('Unsupported payment type');
                    }.bind(this)
                }
            };
            const boldPayments = new window.bold.Payments(initialData);
            boldPayments.renderPayments('payment_form_bold');
        },
        /**
         * Convert PPCP address to Magento address.
         *
         * @param {{}} ppcpAddress
         * @return {{}}
         */
        convertPPCPAddressToMagentoAddress: function (ppcpAddress) {
            return {
                'firstname': ppcpAddress.first_name,
                'lastname': ppcpAddress.last_name,
                'street1': ppcpAddress.address_line_1,
                'street2': ppcpAddress.address_line_2,
                'city': ppcpAddress.city,
                'postcode': ppcpAddress.postal_code,
                'country_id': ppcpAddress.country_code,
                'region': ppcpAddress.state,
            };
        },
        /**
         * Load specified script with attributes.
         *
         * @returns {Promise<void>}
         */
        loadScript: async function (src, attributes = {}) {
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = src;
                script.async = true;
                script.onload = resolve;
                script.onerror = reject;
                if (attributes.constructor === Object) {
                    Object.keys(attributes).forEach((key) => {
                        script.setAttribute(key, attributes[key]);
                    });
                }
                document.head.appendChild(script);
            });
        },
        /**
         * Render payment form considering Fastlane.
         *
         * @returns {void}
         */
        renderPaymentForm: async function () {
            const boldPaymentsForm = document.getElementById('payment_form_bold');
            if (this.isFastlaneAvailable) {
                if (boldPaymentsForm.innerHTML.trim() === '') {
                    this.hidePaymentMethod();
                }
                return;
            }
            const paymentInstance = await window.bold.baseInstance.getBoldPaymentsInstance();
            await paymentInstance.renderPayments(
                'payment_form_bold',
                {
                    fastlane: !!this.isFastlaneAvailable,
                    shouldRenderSpiFrame: !this.isFastlaneAvailable
                }
            );
        },
        /**
         * Wait for checkout to initialize.
         *
         * @returns {void}
         */
        waitForCheckoutInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof checkout !== 'undefined' && checkout.save) {
                    this.wrapCheckoutSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
            }, 10000);
        },
        /**
         * Wait for payment to initialize.
         *
         * @returns {void}
         */
        waitForPaymentInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof payment !== 'undefined' && payment.save) {
                    this.wrapPaymentSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
            }, 10000);
        },
        /**
         * Wrap checkout save method to process order on Bold side first.
         *
         * @return {void}
         */
        wrapCheckoutSave: function () {
            checkout.save = checkout.save.wrap(
                function (checkoutSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return checkoutSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return checkoutSaveMethod();
                    }
                    checkout.validate();
                    if (!this.paymentId) {
                        checkout.setLoadWaiting('payment', true);
                        this.tokenize();
                        return;
                    }
                    checkout.setLoadWaiting(false);
                    checkoutSaveMethod();
                }.bind(this)
            );
        },
        /**
         * Wrap payment save method to get PayPal token first.
         *
         * @return {void}
         */
        wrapPaymentSave: function () {
            payment.save = payment.save.wrap(
                function (paymentSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return paymentSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return paymentSaveMethod();
                    }
                    if (!this.paymentId) {
                        checkout.setLoadWaiting('payment', true);
                        this.tokenize();
                        return;
                    }
                    checkout.setLoadWaiting(false);
                    paymentSaveMethod();
                }.bind(this)
            );
        },
        /**
         * Hide payment method section.
         */
        hidePaymentMethod: function () {
            this.paymentMethodElement.style.display = 'none';
        },
        /**
         * Show payment method section.
         */
        showPaymentMethod: function () {
            this.paymentMethodElement.style.display = 'block';
        },
        /**
         * Send tokenize action to SPI iframe.
         *
         * @return {Promise<void>}
         */
        tokenize: async function () {
            const iframeWindow = document.getElementById('spi_frame_payment_form_bold').contentWindow;
            const cartData = await window.bold.baseInstance.getCartData();
            const payload = {
                customer: cartData.customer,
                billing_address: cartData.billing_address,
                shipping_address: cartData.shipping_address || cartData.billing_address,
                totals: cartData.totals,
            };
            iframeWindow.postMessage({actionType: 'ACTION_SPI_TOKENIZE', payload: payload}, '*');
        },
        /**
         * Subscribe to SPI iframe events.
         *
         * @returns {void}
         */
        subscribeToSpiEvents() {
            window.addEventListener('message', ({data}) => {
                const eventType = data.eventType;
                if (eventType) {
                    switch (eventType) {
                        case 'EVENT_SPI_TOKENIZED':
                            if (!data.payload.success) {
                                this.paymentId = null;
                                console.error('Failed to tokenize');
                                checkout.setLoadWaiting(false);
                                return;
                            }
                            this.paymentId = data.payload?.payload?.data?.payment_id;
                            if (checkout.save) {
                                checkout.save();
                                return;
                            }
                            payment.save();
                            break;
                        case 'EVENT_SPI_TOKENIZE_FAILED':
                            this.paymentId = null;
                            console.error('Failed to tokenize');
                            checkout.setLoadWaiting(false);
                            break;
                        case 'EVENT_SPI_PAYMENT_ORDER_SCA':
                            checkout.setLoadWaiting(false);
                            break;
                        case 'EVENT_SPI_ENABLE_FULLSCREEN':
                            checkout.setLoadWaiting(false);
                            break;
                        case 'EVENT_SPI_DISABLE_FULLSCREEN':
                            checkout.setLoadWaiting('payment', true);
                            break;
                    }
                }
            });
        },
    });
    if (typeof window.bold === 'undefined') {
        window.bold = {};
    }
    window.bold.boldPaymentMethod = new BoldPaymentMethod();
</script>
