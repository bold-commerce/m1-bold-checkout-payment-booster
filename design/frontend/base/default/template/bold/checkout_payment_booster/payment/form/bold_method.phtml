<?php
/**
 * Bold Payments PIGI iframe template.
 *
 * @var Bold_CheckoutPaymentBooster_Block_Payment_Form_Bold $this
 */
?>
<div id='payment_form_bold' style="display: none"></div>

<script type="text/javascript">
    /**
     * Bold order data sync class.
     */
    let BoldPaymentMethod = Class.create({
        paymentMethodElement: document.getElementById('p_method_bold').parentNode,
        paymentContainer: document.getElementById('bold-payments-container'),
        paymentCheckbox: document.getElementById('p_method_bold'),
        isAvailable: <?php echo $this->isAvailable(); ?>,
        isFastlaneAvailable: <?php echo $this->isFastlaneAvailable(); ?>,
        paymentId: null,
        /**
         * Initialize class.
         *
         * @returns {*|boolean}
         */
        initialize: async function () {
            if (!this.isAvailable) {
                this.hidePaymentMethod();
                return;
            }
            await this.waitForBaseInstance();
            await this.renderPaymentForm();
            this.subscribeToSpiEvents();
            this.waitForPaymentInitialization();
            this.waitForCheckoutInitialization();
        },
        /**
         * Wait for base instance to be initialized.
         *
         * @return {Promise<unknown>}
         */
        waitForBaseInstance: function () {
            return new Promise((resolve) => {
                const intervalId = setInterval(() => {
                    if (typeof window.bold.baseInstance !== 'undefined') {
                        clearInterval(intervalId);
                        resolve();
                    }
                }, 100);
                setTimeout(() => {
                    clearInterval(intervalId);
                    resolve();
                }, 10000);
            });
        },
        /**
         * Render payment form considering Fastlane.
         *
         * @returns {void}
         */
        renderPaymentForm: async function () {
            const boldPaymentsForm = document.getElementById('payment_form_bold');
            if (this.isFastlaneAvailable) {
                if (boldPaymentsForm.innerHTML.trim() === '') {
                    this.hidePaymentMethod();
                }
                return;
            }
            const paymentInstance = await window.bold.baseInstance.getBoldPaymentsInstance();
            await paymentInstance.renderPayments(
                'payment_form_bold',
                {
                    fastlane: !!this.isFastlaneAvailable,
                    shouldRenderSpiFrame: !this.isFastlaneAvailable
                }
            );
        },
        /**
         * Wait for checkout to initialize.
         *
         * @returns {void}
         */
        waitForCheckoutInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof checkout !== 'undefined' && checkout.save) {
                    this.wrapCheckoutSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
            }, 10000);
        },
        /**
         * Wait for payment to initialize.
         *
         * @returns {void}
         */
        waitForPaymentInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof payment !== 'undefined' && payment.save) {
                    this.wrapPaymentSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
            }, 10000);
        },
        /**
         * Wrap checkout save method to process order on Bold side first.
         *
         * @return {void}
         */
        wrapCheckoutSave: function () {
            checkout.save = checkout.save.wrap(
                function (checkoutSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return checkoutSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return checkoutSaveMethod();
                    }
                    checkout.validate();
                    if (!this.paymentId) {
                        checkout.setLoadWaiting('payment', true);
                        this.tokenize();
                        return;
                    }
                    checkout.setLoadWaiting(false);
                    checkoutSaveMethod();
                }.bind(this)
            );
        },
        /**
         * Wrap payment save method to get PayPal token first.
         *
         * @return {void}
         */
        wrapPaymentSave: function () {
            payment.save = payment.save.wrap(
                function (paymentSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return paymentSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return paymentSaveMethod();
                    }
                    if (!this.paymentId) {
                        checkout.setLoadWaiting('payment', true);
                        this.tokenize();
                        return;
                    }
                    checkout.setLoadWaiting(false);
                    paymentSaveMethod();
                }.bind(this)
            );
        },
        /**
         * Hide payment method section.
         */
        hidePaymentMethod: function () {
            this.paymentMethodElement.style.display = 'none';
        },
        /**
         * Show payment method section.
         */
        showPaymentMethod: function () {
            this.paymentMethodElement.style.display = 'block';
        },
        /**
         * Send tokenize action to SPI iframe.
         *
         * @return {Promise<void>}
         */
        tokenize: async function () {
            const iframeWindow = document.getElementById('spi_frame_payment_form_bold').contentWindow;
            const cartData = await window.bold.baseInstance.getCartData();
            const payload = {
                customer: cartData.customer,
                billing_address: cartData.billing_address,
                shipping_address: cartData.shipping_address || cartData.billing_address,
                totals: cartData.totals,
            };
            iframeWindow.postMessage({actionType: 'ACTION_SPI_TOKENIZE', payload: payload}, '*');
        },
        /**
         * Subscribe to SPI iframe events.
         *
         * @returns {void}
         */
        subscribeToSpiEvents() {
            window.addEventListener('message', ({data}) => {
                const eventType = data.eventType;
                if (eventType) {
                    switch (eventType) {
                        case 'EVENT_SPI_TOKENIZED':
                            if (!data.payload.success) {
                                this.paymentId = null;
                                console.error('Failed to tokenize');
                                checkout.setLoadWaiting(false);
                                return;
                            }
                            this.paymentId = data.payload?.payload?.data?.payment_id;
                            if (checkout.save) {
                                checkout.save();
                                return;
                            }
                            payment.save();
                            break;
                        case 'EVENT_SPI_TOKENIZE_FAILED':
                            this.paymentId = null;
                            console.error('Failed to tokenize');
                            checkout.setLoadWaiting(false);
                            break;
                        case 'EVENT_SPI_PAYMENT_ORDER_SCA':
                            checkout.setLoadWaiting(false);
                            break;
                        case 'EVENT_SPI_ENABLE_FULLSCREEN':
                            checkout.setLoadWaiting(false);
                            break;
                        case 'EVENT_SPI_DISABLE_FULLSCREEN':
                            checkout.setLoadWaiting('payment', true);
                            break;
                    }
                }
            });
        },
    });
    if (typeof window.bold === 'undefined') {
        window.bold = {};
    }
    window.bold.boldPaymentMethod = new BoldPaymentMethod();
</script>
