<?php
/**
 * Bold Payments PIGI iframe template.
 *
 * @var Bold_CheckoutPaymentBooster_Block_Form_Payment $this
 */
?>
<div id='bold-payments-container' style='display: none;'>
    <iframe id='PIGI' scrolling='no' width='100%' frameborder='0'></iframe>
</div>
<span id='bold-payments-iframe-loader' class='please-wait' style='display:none;'>
    <img src="<?php echo $this->getSkinUrl('images/opc-ajax-loader.gif') ?>"
         alt="<?php echo $this->__('Please wait...') ?>"
         title="<?php echo $this->__('Please wait...') ?>"
    /> <?php echo $this->__('Please wait...') ?>
</span>

<script type="text/javascript">
    /**
     * Bold order data sync class.
     */
    let BoldOrderData = Class.create({
        paymentContainer: document.getElementById('bold-payments-container'),
        paymentMethodRadioButton: document.getElementById('p_method_bold'),
        iframeUrl: "<?php echo $this->getIframeUrl(); ?>",
        iframeElement: document.getElementById('PIGI'),
        iframeLoader: document.getElementById('bold-payments-iframe-loader'),
        orderDataFieldMapper: {
            'address_id': 'billing-address-select',
            'firstname': 'billing:firstname',
            'email': 'billing:email',
            'lastname': 'billing:lastname',
            'company': 'billing:company',
            'telephone': 'billing:telephone',
            'street1': 'billing:street1',
            'street2': 'billing:street2',
            'city': 'billing:city',
            'region_id': 'billing:region_id',
            'country_id': 'billing:country_id',
            'postcode': 'billing:postcode'
        },
        requiredFields: [
            'email',
            'firstname',
            'lastname',
            'street1',
            'postcode',
            'city',
            'country_id',
            'telephone'
        ],
        orderPayload: {
            'address_id': '<?php echo $this->getAddressId() ?>',
            'email': '<?php echo $this->getCustomerEmail() ?>',
            'firstname': '<?php echo $this->getFirstName() ?>',
            'lastname': '<?php echo $this->getLastName() ?>',
            'company': '<?php echo $this->getCompany() ?>',
            'telephone': '<?php echo $this->getTelephone() ?>',
            'street1': '<?php echo $this->getStreet1() ?>',
            'street2': '<?php echo $this->getStreet2() ?>',
            'city': '<?php echo $this->getCity() ?>',
            'region_id': '<?php echo $this->getRegionId() ?>',
            'country_id': '<?php echo $this->getCountryId() ?>',
            'postcode': '<?php echo $this->getPostcode() ?>',
        },
        /**
         * Initialize class.
         *
         * @returns {*|boolean}
         */
        initialize: function () {
            if (!window.bold) {
                window.bold = {
                    orderData: {}
                };
            }
            this.syncData();
            this.subscribeToFieldsChanges();
            this.subscribeToPaymentMethodChanges();
        },
        /**
         * Subscribe to form fields changes.
         */
        subscribeToFieldsChanges: function () {
            Object.values(this.orderDataFieldMapper).each(function (selector) {
                let field = $(selector);
                if (field) {
                    field.observe('change', () => {
                        setTimeout(() => {
                            this.syncData();
                        }, 500);
                    });
                }
            }.bind(this));
        },
        /**
         * Update Bold order data payload.
         */
        updateOrderDataPayload: function () {
            Object.keys(this.orderDataFieldMapper).forEach(function (key) {
                let field = this.orderDataFieldMapper[key];
                if ($(field)) {
                    this.orderPayload[key] = $(field).value;
                }
            }.bind(this));
        },
        /**
         * Validate payload.
         *
         * @returns {boolean}
         */
        isPayloadValid: function () {
            let isInvalid = this.requiredFields.some((field) => {
                return !this.orderPayload[field];

            });
            if (isInvalid) {
                return false;
            }
            let regionsRequired = window.countryRegions || {
                config: {
                    regions_required: []
                }
            };
            let isRegionRequired = regionsRequired.config.regions_required.indexOf(this.orderPayload.country_id) !== -1;
            if (isRegionRequired && !this.orderPayload.region_id) {
                return false;
            }
            return !isInvalid;
        },
        /**
         * Check if already hydrated payload differs from new one.
         *
         * @returns {boolean}
         */
        isPayloadChanged: function () {
            let isChanged = false;
            for (let [key, value] of Object.entries(this.orderPayload)) {
                if (window.bold.orderData[key] !== value) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        },
        /**
         * Hydrate Bold order.
         */
        syncData: function () {
            if (Ajax.activeRequestCount > 0) {
                this.syncData.bind(this).delay(0.1);
                return;
            }
            this.updateOrderDataPayload();
            if (!this.isPayloadValid()) {
                return;
            }
            if (!this.isPayloadChanged()) {
                return;
            }
            new Ajax.Request('/checkoutpaymentbooster/index/syncOrderData', {
                method: 'post',
                parameters: Object.assign(this.orderPayload, {form_key: '<?php echo $this->getFormKey() ?>'}),
                onSuccess: function () {
                    window.bold.orderData = Object.assign({}, this.orderPayload);
                    this.selectPaymentMethod();
                    this.showPIGI();
                }.bind(this),
                onLoading: function () {
                    this.iframeLoader.style.display = 'block';
                }.bind(this),
                onFailure: function () {
                    this.unselectPaymentMethod();
                    window.bold.orderData = {};
                    console.error('Failed to sync order data');
                }.bind(this),
            });
        },
        /**
         * Select payment method item.
         *
         * @returns {void}
         * @private
         */
        selectPaymentMethod: function () {
            this.paymentMethodRadioButton.checked = true;
        },
        /**
         * Unselect payment method item.
         *
         * @returns {void}
         * @private
         */
        unselectPaymentMethod: function () {
            this.paymentMethodRadioButton.checked = false;
        },
        /**
         * Show PIGI iframe.
         *
         * @returns {void}
         * @private
         */
        showPIGI: function () {
            if (!this.iframeElement.src) {
                this.iframeElement.src = this.iframeUrl;
            }
            this.paymentContainer.style.display = 'block';
            this.iframeLoader.style.display = 'none';
        },
        /**
         * Hide PIGI iframe.
         *
         * @returns {void}
         * @private
         */
        hidePIGI: function () {
            this.paymentContainer.style.display = 'none';
            this.iframeLoader.style.display = 'none';
        },
        /**
         * Subscribe to payment method change to show/hide PIGI iframe.
         *
         * @returns {void}
         * @private
         */
        subscribeToPaymentMethodChanges: function () {
            let self = this;
            let paymentMethodsRadioButtons = document.querySelectorAll(
                'input[type="radio"][name="payment[method]"]'
            );
            paymentMethodsRadioButtons.forEach(function (radioButton) {
                radioButton.addEventListener('change', function () {
                    self.paymentMethodRadioButton.checked ? self.showPIGI() : self.hidePIGI();
                });
            });
        }
    });

    const boldOrderData = new BoldOrderData();
    boldOrderData.initialize();
</script>
