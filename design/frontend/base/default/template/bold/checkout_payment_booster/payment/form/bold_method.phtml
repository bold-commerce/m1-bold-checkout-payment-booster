<?php
/**
 * Bold Payments PIGI iframe template.
 *
 * @var Bold_CheckoutPaymentBooster_Block_Payment_Form_Bold $this
 */
?>
<div id='payment_form_bold' style='display: none'>
    <iframe id='PIGI' scrolling='no' width='100%' frameborder='0'></iframe>
</div>
<span class='please-wait' id='bold-payments-iframe-loader' style='display:none;'>
        <img src="<?php echo $this->getSkinUrl('images/opc-ajax-loader.gif') ?>"
             alt="<?php echo $this->__('Please wait...') ?>"
             title="<?php echo $this->__('Please wait...') ?>"
        /> <?php echo $this->__('Please wait...') ?>
</span>

<script type="text/javascript">
    /**
     * Bold order data sync class.
     */
    let Bold = Class.create({
        iframeUrl: "<?php echo $this->getIframeUrl(); ?>",
        paymentMethodElement: document.getElementById('p_method_bold').parentNode,
        awaitingRefreshBeforePlacingOrder: false,
        paymentContainer: document.getElementById('bold-payments-container'),
        available: <?php echo $this->isAvailable(); ?>,
        fastlaneAvailable: <?php echo $this->isFastlaneAvailable(); ?>,
        alternativePaymentMethods: <?php echo $this->getAlternativePaymentMethods(); ?>,
        iframeElement: document.getElementById('PIGI'),
        iframeWindow: null,
        paymentCheckbox: null,
        loader: document.getElementById('bold-payments-iframe-loader'),
        orderDataFieldMapper: {
            'address_id': 'billing-address-select',
            'firstname': 'billing:firstname',
            'email': 'billing:email',
            'lastname': 'billing:lastname',
            'company': 'billing:company',
            'telephone': 'billing:telephone',
            'street1': 'billing:street1',
            'street2': 'billing:street2',
            'city': 'billing:city',
            'region_id': 'billing:region_id',
            'country_id': 'billing:country_id',
            'postcode': 'billing:postcode'
        },
        requiredFields: [
            'email',
            'firstname',
            'lastname',
            'street1',
            'postcode',
            'city',
            'country_id',
            'telephone'
        ],
        orderPayload: {
            'address_id': '<?php echo $this->getAddressId() ?>',
            'email': '<?php echo $this->getCustomerEmail() ?>',
            'firstname': '<?php echo $this->getFirstName() ?>',
            'lastname': '<?php echo $this->getLastName() ?>',
            'company': '<?php echo $this->getCompany() ?>',
            'telephone': '<?php echo $this->getTelephone() ?>',
            'street1': '<?php echo $this->getStreet1() ?>',
            'street2': '<?php echo $this->getStreet2() ?>',
            'city': '<?php echo $this->getCity() ?>',
            'region_id': '<?php echo $this->getRegionId() ?>',
            'country_id': '<?php echo $this->getCountryId() ?>',
            'postcode': '<?php echo $this->getPostcode() ?>',
        },
        /**
         * Initialize class.
         *
         * @returns {*|boolean}
         */
        initialize: function () {
            if (!window.bold) {
                window.bold = {
                    orderData: {}
                };
            }
            this.paymentCheckbox = document.getElementById('p_method_bold');
            this.hidePaymentMethod();
            this.syncData();
            this.subscribeToFieldsChanges();
            this.subscribeToPIGI();
            this.waitForPaymentInitialization();
            this.waitForCheckoutInitialization();
        },
        /**
         * Check if PIGI is available.
         *
         * @return {*|boolean}
         */
        isAvailable: function () {
            return this.available && !this.fastlaneAvailable;
        },
        /**
         * Subscribe to fields changes for order hydration.
         *
         * @returns {void}
         */
        subscribeToFieldsChanges: function () {
            Object.values(this.orderDataFieldMapper).each(function (selector) {
                let field = $(selector);
                if (field) {
                    field.observe('change', () => {
                        setTimeout(() => {
                            this.syncData();
                        }, 500);
                    });
                }
            }.bind(this));
        },
        /**
         * Update order data payload for order hydration call.
         *
         * @returns {void}
         */
        updateOrderDataPayload: function () {
            Object.keys(this.orderDataFieldMapper).forEach(function (key) {
                let field = this.orderDataFieldMapper[key];
                if ($(field)) {
                    this.orderPayload[key] = $(field).value;
                }
            }.bind(this));
        },
        /**
         * Validate order data payload for hydration.
         *
         * @returns {boolean}
         */
        isPayloadValid: function () {
            let isInvalid = this.requiredFields.some((field) => {
                return !this.orderPayload[field];

            });
            if (isInvalid) {
                return false;
            }
            let regionsRequired = window.shippingRegionUpdater || {
                config: {
                    regions_required: []
                }
            };
            let isRegionRequired = regionsRequired.config.regions_required.indexOf(this.orderPayload.country_id) !== -1;
            if (isRegionRequired && !this.orderPayload.region_id) {
                return false;
            }
            return !isInvalid;
        },
        /**
         * Wait for checkout to initialize.
         *
         * @returns {void}
         */
        waitForCheckoutInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof checkout !== 'undefined' && checkout.save) {
                    this.wrapCheckoutSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
            }, 10000);
        },
        /**
         * Wait for payment to initialize.
         *
         * @returns {void}
         */
        waitForPaymentInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof payment !== 'undefined' && payment.save) {
                    this.wrapPaymentSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
            }, 10000);
        },
        /**
         * Check if already hydrated payload differs from new one.
         *
         * @returns {boolean}
         */
        isPayloadChanged: function () {
            if (!window.bold.orderData) {
                return true;
            }
            let isChanged = false;
            for (let [key, value] of Object.entries(this.orderPayload)) {
                if (window.bold.orderData[key] !== value) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        },
        /**
         * Hydrate Bold order.
         */
        syncData: function () {
            if (Ajax.activeRequestCount > 0) {
                this.syncData.bind(this).delay(0.1);
                return;
            }
            this.updateOrderDataPayload();
            if (!this.isPayloadValid()) {
                console.log('Payload is invalid');
                return;
            }
            if (!this.isPayloadChanged()) {
                console.log('Payload is not changed');
                return;
            }
            console.log('Hydrating order data...', this.orderPayload);
            new Ajax.Request('/checkoutpaymentbooster/index/hydrateOrderData', {
                method: 'post',
                parameters: Object.assign(this.orderPayload, {form_key: '<?php echo $this->getFormKey() ?>'}),
                onSuccess: function () {
                    window.bold.orderData = Object.assign({}, this.orderPayload);
                    this.loader.style.display = 'none';
                    this.showPIGI();
                }.bind(this),
                onLoading: function () {
                    if (this.paymentMethodElement.style.display !== 'none') {
                        this.loader.style.display = 'block';
                    }
                }.bind(this),
                onFailure: function () {
                    this.hidePaymentMethod();
                    window.bold.orderData = {};
                    console.error('Failed to sync order data');
                }.bind(this),
            });
        },
        /**
         * Wrap checkout save method to process order on Bold side first.
         *
         * @return {void}
         */
        wrapCheckoutSave: function () {
            checkout.save = checkout.save.wrap(
                function (checkoutSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return checkoutSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return checkoutSaveMethod();
                    }
                    checkout.setLoadWaiting('payment', true);
                    if (!this.paymentType) {
                        this.awaitingRefreshBeforePlacingOrder = true;
                        if (!this.iframeWindow) {
                            checkout.setLoadWaiting(false);
                            return checkoutSaveMethod();
                        }
                        this.iframeWindow.postMessage({actionType: 'PIGI_CLEAR_ERROR_MESSAGES'}, '*');
                        this.iframeWindow.postMessage({actionType: 'PIGI_REFRESH_ORDER'}, '*');
                    } else {
                        checkout.setLoadWaiting(false);
                        checkoutSaveMethod();
                    }
                }.bind(this)
            );
        },
        /**
         * Wrap payment save method to get PayPal token first.
         *
         * @return {void}
         */
        wrapPaymentSave: function () {
            payment.save = payment.save.wrap(
                function (paymentSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return paymentSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return paymentSaveMethod();
                    }
                    checkout.setLoadWaiting('payment', true);
                    if (!this.paymentType) {
                        if (!this.iframeWindow) {
                            checkout.setLoadWaiting(false);
                            return paymentSaveMethod();
                        }
                        this.awaitingRefreshBeforePlacingOrder = true;
                        this.iframeWindow.postMessage({actionType: 'PIGI_CLEAR_ERROR_MESSAGES'}, '*');
                        this.iframeWindow.postMessage({actionType: 'PIGI_REFRESH_ORDER'}, '*');
                    } else {
                        checkout.setLoadWaiting(false);
                        paymentSaveMethod();
                    }
                }.bind(this)
            );
        },
        /**
         * Hide payment method section.
         */
        hidePaymentMethod: function () {
            console.log('Hiding payment method');
            this.paymentMethodElement.style.display = 'none';
            this.loader.style.display = 'none';
        },
        /**
         * Refresh Bold order to get the latest cart data and show PIGI iframe.
         *
         * @returns {void}
         * @private
         */
        showPIGI: function () {
            if (!this.isAvailable()) {
                return;
            }
            console.log('Showing PIGI');
            if (!this.iframeElement.src) {
                this.iframeElement.src = this.iframeUrl;
            }
            this.paymentMethodElement.style.display = 'block';
            this.paymentContainer.style.display = 'block';
            this.loader.style.display = 'none';
        },
        subscribeToPIGI() {
            window.addEventListener('message', ({data}) => {
                const responseType = data.responseType;
                if (responseType) {
                    switch (responseType) {
                        case 'PIGI_UPDATE_HEIGHT':
                            if (this.iframeElement.height === Math.round(data.payload.height) + 'px') {
                                return;
                            }
                            console.log('Updating iframe height');
                            this.iframeElement.height = Math.round(data.payload.height) + 'px';
                            if (this.fastlaneAvailable) {
                                this.iframeWindow.postMessage({actionType: 'PIGI_HIDE_CREDIT_CARD_OPTION'}, '*');
                            }
                            break;
                        case 'PIGI_INITIALIZED':
                            console.log('PIGI initialized');
                            this.iframeWindow = this.iframeElement.contentWindow;
                            if (data.payload && data.payload.height && this.iframeElement) {
                                this.iframeElement.height = Math.round(data.payload.height) + 'px';
                            }
                            break;
                        case 'PIGI_REFRESH_ORDER':
                            if (this.awaitingRefreshBeforePlacingOrder) {
                                this.iframeWindow.postMessage({actionType: 'PIGI_ADD_PAYMENT'}, '*');
                                this.awaitingRefreshBeforePlacingOrder = false;
                            }
                            break;
                        case 'PIGI_ADD_PAYMENT':
                            console.log('Adding payment');
                            if (!data.payload.success) {
                                checkout.setLoadWaiting(false);
                                console.error('Failed to add payment');
                                this.paymentType = null;
                                return;
                            }
                            this.paymentType = data.payload.paymentType;
                            if (checkout.save) {
                                checkout.setLoadWaiting(false);
                                checkout.save();
                                return;
                            }
                            payment.save();
                    }
                }
            });
        },
    });
    const boldInstance = new Bold();
</script>
