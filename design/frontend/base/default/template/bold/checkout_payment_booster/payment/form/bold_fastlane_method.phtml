<?php
/**
 * Fastlane payment method form.
 *
 * @var $this Bold_CheckoutPaymentBooster_Block_Payment_Form_Fastlane
 */
?>
<div id='payment_form_bold_fastlane' style='display: none;'></div>
<script type='text/javascript'>
    /**
     * Bold fastlane payment component.
     */
    const BoldFastlane = Class.create({
        loaderImageUrl: '<?php echo $this->getSkinUrl('images/opc-ajax-loader.gif'); ?>',
        emailField: document.getElementById('billing:email'),
        gatewayData: <?php echo $this->getGatewayData(); ?>,
        fastlaneStyles: <?php echo $this->getFastlaneStyles(); ?>,
        paymentContainerId: 'payment_form_bold_fastlane',
        fastlaneAddressContainerId: 'fastlane-address-container',
        isAvailable: <?php echo $this->isAvailable(); ?>,
        fastlanePaymentComponent: null,
        paymentToken: null,
        paymentCheckbox: null,
        billingAddressForm: null,
        billingAddressFieldsMap: {
            'firstname': 'billing:firstname',
            'email': 'billing:email',
            'lastname': 'billing:lastname',
            'company': 'billing:company',
            'telephone': 'billing:telephone',
            'street1': 'billing:street1',
            'street2': 'billing:street2',
            'city': 'billing:city',
            'region_id': 'billing:region_id',
            'country_id': 'billing:country_id',
            'postcode': 'billing:postcode'
        },
        shippingAddressFieldsMap: {
            'firstname': 'shipping:firstname',
            'lastname': 'shipping:lastname',
            'company': 'shipping:company',
            'telephone': 'shipping:telephone',
            'street1': 'shipping:street1',
            'street2': 'shipping:street2',
            'city': 'shipping:city',
            'region_id': 'shipping:region_id',
            'country_id': 'shipping:country_id',
            'postcode': 'shipping:postcode'
        },
        /**
         * Initialize Fastlane instance, subscribe to email changes.
         */
        initialize: async function () {
            if (!this.isAvailable || !this.gatewayData) {
                return;
            }
            console.count('initialize');
            if (!window.bold) {
                window.bold = {};
            }
            if (!window.bold.fastlane) {
                window.bold.fastlane = {
                    instance: null
                };
            }
            this.paymentCheckbox = document.getElementById('p_method_bold_fastlane');
            this.billingAddressForm = document.getElementById('billing-new-address-form');
            await this.buildFastlaneInstance()
            await this.authorize();
            this.subscribeToEmailChanges();
            this.renderPaymentContainer();
            this.waitForCheckoutInitialization();
            this.waitForPaymentInitialization();
        },
        waitForCheckoutInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof checkout !== 'undefined' && checkout.save) {
                    console.log('Fastlane. Checkout is initialized.');
                    this.wrapCheckoutSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
                console.log('Fastlane. Stopped waiting for checkout to initialize.');
            }, 10000);
        },
        waitForPaymentInitialization: function () {
            const intervalId = setInterval(() => {
                if (typeof payment !== 'undefined' && payment.save) {
                    console.log('Fastlane. Payment is initialized.');
                    this.wrapPaymentSave();
                    clearInterval(intervalId);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(intervalId);
                console.log('Fastlane. Stopped waiting for payment to initialize.');
            }, 10000);
        },
        /**
         * Wrap payment save method to get PayPal token first.
         *
         * @return {void}
         */
        wrapPaymentSave: function () {
            console.count('wrapPaymentSave');
            payment.save = payment.save.wrap(
                function (paymentSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return paymentSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return paymentSaveMethod();
                    }
                    if (!this.paymentToken) {
                        console.log('Get Fastlane payment token...');
                        this.fastlanePaymentComponent.getPaymentToken().then((token) => {
                            console.log('Fastlane payment token:', token);
                            this.paymentToken = token;

                            const paymentForm = document.getElementById(payment.form);
                            if (paymentForm) {
                                const hiddenInput = document.createElement('input');
                                hiddenInput.type = 'hidden';
                                hiddenInput.name = 'payment[token]';
                                hiddenInput.value = token.id;
                                paymentForm.appendChild(hiddenInput);
                            }
                            this.setAddress(token.paymentSource.card.billingAddress);
                            return paymentSaveMethod();
                        }).catch(() => {
                            console.log('Failed to get Fastlane payment token.');
                            return false;
                        })
                    } else {
                        return paymentSaveMethod();
                    }
                }.bind(this)
            );
        },
        /**
         * Wrap checkout save method to process order on Bold side first.
         *
         * @return {void}
         */
        wrapCheckoutSave: function () {
            console.count('wrapCheckoutSave');
            checkout.save = checkout.save.wrap(
                function (checkoutSaveMethod) {
                    if (!this.paymentCheckbox) {
                        return checkoutSaveMethod();
                    }
                    if (!this.paymentCheckbox.checked) {
                        return checkoutSaveMethod();
                    }
                    if (!this.paymentToken) {
                        console.log('Get Fastlane payment token...');
                        this.fastlanePaymentComponent.getPaymentToken().then((token) => {
                            console.log('Fastlane payment token:', token);
                            this.paymentToken = token;
                            const paymentForm = document.getElementById(payment.form);
                            if (paymentForm) {
                                const hiddenInput = document.createElement('input');
                                hiddenInput.type = 'hidden';
                                hiddenInput.name = 'payment[token]';
                                hiddenInput.value = token.id;
                                paymentForm.appendChild(hiddenInput);
                            }
                            this.setAddress(token.paymentSource.card.billingAddress);
                            return checkoutSaveMethod();
                        }).catch(() => {
                            return false;
                        })
                    } else {
                        return checkoutSaveMethod();
                    }
                }.bind(this)
            );
        },
        /**
         * Build Fastlane Instance considering gateway type.
         *
         * @return {Promise<void>}
         */
        buildFastlaneInstance: async function () {
            console.count('buildFastlaneInstance');
            if (window.bold.fastlane.instance) {
                return;
            }
            console.log('Build Fastlane Instance');
            if (this.gatewayData.is_test_mode) {
                window.localStorage.setItem('axoEnv', 'sandbox');
                window.localStorage.setItem('fastlaneEnv', 'sandbox');
            }
            if (this.gatewayData.type === 'braintree') {
                await this.buildBraintreeFastlaneInstance();
            }
            if (this.gatewayData.type === 'ppcp') {
                await this.buildPpcpFastlaneInstance();
            }
        },
        /**
         * Build Fastlane Instance for the Braintree.
         *
         * @return {Promise<void>}
         */
        buildBraintreeFastlaneInstance: async function () {
            console.count('buildBraintreeFastlaneInstance');
            await this.loadScript(
                'https://js.braintreegateway.com/web/3.101.0-fastlane-beta.7.2/js/client.min.js'
            );
            await this.loadScript(
                'https://js.braintreegateway.com/web/3.101.0-fastlane-beta.7.2/js/data-collector.min.js'
            );
            await this.loadScript(
                'https://js.braintreegateway.com/web/3.101.0-fastlane-beta.7.2/js/hosted-fields.min.js'
            );
            await this.loadScript(
                'https://js.braintreegateway.com/web/3.101.0-fastlane-beta.7.2/js/fastlane.min.js'
            );
            const clientInstance = await window.braintree.client.create({
                authorization: this.gatewayData.client_token,
            });
            const dataCollectorInstance = await window.braintree.dataCollector.create(
                {
                    client: clientInstance,
                }
            );
            const {deviceData} = dataCollectorInstance;
            const styles = this.fastlaneStyles || {};
            window.bold.fastlane.instance = await window.braintree.fastlane.create({
                authorization: this.gatewayData.client_token,
                client: clientInstance,
                deviceData: deviceData,
                styles: styles,
            });
        },
        buildPpcpFastlaneInstance: async function () {
            const debugMode = this.gatewayData.is_test_mode ? '&debug=true' : '';
            await this.loadScript(
                `https://www.paypal.com/sdk/js?client-id=${this.gatewayData.client_id}&components=fastlane${debugMode}`,
                {
                    'data-user-id-token': this.gatewayData.client_token,
                    'data-client-metadata-id': 'Magento2',
                }
            );
            window.bold.fastlane.instance = await window.paypal.Fastlane();
        },
        /**
         * Load given script with attributes.
         *
         * @param {string} src
         * @param {{}} attributes
         * @return {Promise<unknown>}
         */
        loadScript: async function (src, attributes = {}) {
            console.count('loadScript');
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = src;
                script.async = true;
                script.onload = resolve;
                script.onerror = reject;
                if (attributes.constructor === Object) {
                    Object.keys(attributes).forEach((key) => {
                        script.setAttribute(key, attributes[key]);
                    });
                }
                document.head.appendChild(script);
            });
        },
        /**
         * Render Fastlane watermark component.
         *
         * @param watermarkContainerId
         * @param afterElement
         * @return {void}
         */
        renderWatermarkComponent: function (watermarkContainerId, afterElement) {
            console.count('renderWatermarkComponent');
            const existingWatermarkContainer = document.getElementById(watermarkContainerId);
            if (existingWatermarkContainer) {
                return;
            }

            const watermarkContainer = document.createElement('div');
            watermarkContainer.id = watermarkContainerId;

            const watermarkContainerImg = document.createElement('img');
            watermarkContainerImg.src = 'https://www.paypalobjects.com/connect-boba/assets/FastLaneLogoSmall.svg';
            watermarkContainerImg.alt = '';
            watermarkContainer.appendChild(watermarkContainerImg);

            afterElement.insertAdjacentElement('afterend', watermarkContainer);

            window.bold.fastlane.instance.FastlaneWatermarkComponent({
                includeAdditionalInfo: true
            }).then((WatermarkComponent) => {
                WatermarkComponent.render('#' + watermarkContainerId);
            });
        },
        /**
         * Show/Hide loader.
         *
         * @param afterElement
         * @param shouldDisplay
         */
        toggleLoader: function (afterElement, shouldDisplay) {
            console.count('toggleLoader');
            if (shouldDisplay) {
                const loaderContainer = document.createElement('span');
                loaderContainer.id = afterElement.id + '-loader';
                loaderContainer.className = 'please-wait';
                loaderContainer.style.display = 'block';

                const loaderContainerImg = document.createElement('img');
                loaderContainerImg.src = this.loaderImageUrl;
                loaderContainerImg.className = 'v-middle';
                loaderContainerImg.alt = '';
                loaderContainer.appendChild(loaderContainerImg);

                const loaderText = document.createTextNode('Loading, please wait...');
                loaderContainer.appendChild(loaderText);

                afterElement.insertAdjacentElement('afterend', loaderContainer);
            } else {
                const loaderContainer = document.getElementById(afterElement.id + '-loader');
                if (loaderContainer) {
                    loaderContainer.remove();
                }
            }
        },
        /**
         * Select payment method.
         *
         * @return {void}
         */
        selectPaymentMethod: function () {
            console.count('selectPaymentMethod');
            if (this.paymentCheckbox) {
                this.paymentCheckbox.checked = true;
                payment.switchMethod('bold_fastlane');
            }
        },
        /**
         * Subscribe to email field changes and authorize customer with latest email field value.
         *
         * @return {void}
         */
        subscribeToEmailChanges: function () {
            console.count('subscribeToEmailChanges');
            if (this.emailField) {
                this.renderWatermarkComponent('fastlane-email-watermark-container', this.emailField)
                this.emailField.observe('change', () => {
                    setTimeout(async () => {
                        await this.authorize();
                    }, 500);
                });
            }
        },
        /**
         * Authorize user with email.
         *
         * @return {Promise<void>}
         */
        authorize: async function () {
            console.count('authorize');
            if (!this.emailField || !this.emailField.value) {
                return;
            }
            if (!window.Validation.validate(this.emailField)) {
                return;
            }
            if (window.bold.fastlane.authorizedEmail === this.emailField.value) {
                return;
            }
            window.bold.fastlane.authorizedEmail = this.emailField.value;
            console.log('Trying to authorize with email: ', this.emailField.value);
            this.toggleLoader(this.emailField, true);
            try {
                const {identity} = window.bold.fastlane.instance;
                const {customerContextId} = await identity.lookupCustomerByEmail(this.emailField.value);
                if (customerContextId) {
                    const {
                        authenticationState,
                        profileData
                    } = await identity.triggerAuthenticationFlow(customerContextId);
                    if (authenticationState === 'succeeded') {
                        window.bold.fastlane.memberAuthenticated = true;
                        console.log('Authorized with profile Data:', profileData);
                        if (profileData.shippingAddress) {
                            this.setAddress(profileData.shippingAddress);
                            this.addAddressButton();
                        }
                    }
                    this.toggleLoader(this.emailField, false);
                    return;
                }
                this.removeAddressButton();
                this.toggleLoader(this.emailField, false);
                window.bold.fastlane.memberAuthenticated = false;
            } catch (error) {
                console.error('Error:', error);
            }
        },
        /**
         * Set Fastlane shipping address as Magento shipping address.
         *
         * @param {{}} fastlaneAddress
         * @return {void}
         */
        setAddress: function (fastlaneAddress) {
            console.count('setAddress');
            const magentoAddress = this.convertFastlaneAddressToMagentoAddress(fastlaneAddress);
            console.log('Set billing address...');
            console.log('Fastlane address:', fastlaneAddress);
            console.log('Magento address:', magentoAddress);
            Object.keys(this.billingAddressFieldsMap).forEach((field) => {
                if (magentoAddress[field] && document.getElementById(this.billingAddressFieldsMap[field])) {
                    document.getElementById(this.billingAddressFieldsMap[field]).value = magentoAddress[field];
                }
            });
        },
        /**
         * Add address button to the billing address form.
         *
         * @return {void}
         */
        addAddressButton: function () {
            console.count('addAddressButton');
            this.removeAddressButton();

            const fastlaneAddressContainer = document.createElement('fieldset');
            fastlaneAddressContainer.id = this.fastlaneAddressContainerId;
            fastlaneAddressContainer.style = '<?php echo $this->getAddressContainerStyle(); ?>';

            const updateAddressButton = document.createElement('button');
            updateAddressButton.type = 'button';
            updateAddressButton.className = 'button';
            updateAddressButton.innerHTML = 'Change Address';
            updateAddressButton.addEventListener('click', () => {
                window.bold.fastlane.instance.profile.showShippingAddressSelector().then((editAddressResult) => {
                    if (!editAddressResult.selectionChanged) {
                        return;
                    }
                    this.setAddress(editAddressResult.selectedAddress);
                });
            });
            fastlaneAddressContainer.appendChild(updateAddressButton);

            const billingAddressForm = document.getElementById('billing-new-address-form');
            if (billingAddressForm) {
                billingAddressForm.appendChild(fastlaneAddressContainer);
            }
            this.renderWatermarkComponent('fastlane-address-watermark', updateAddressButton);
        },
        /**
         * Remove address button from the billing address form.
         *
         * @return {void}
         */
        removeAddressButton: function () {
            console.count('removeAddressButton');
            const fastlaneAddressContainer = document.getElementById(this.fastlaneAddressContainerId);
            if (fastlaneAddressContainer) {
                fastlaneAddressContainer.remove();
            }
        },
        /**
         * Convert Fastlane address to Magento address.
         *
         * @param fastlaneAddress
         * @return {{}}
         */
        convertFastlaneAddressToMagentoAddress: function (fastlaneAddress) {
            console.count('convertFastlaneAddressToMagentoAddress');
            let magentoAddressRegionId = null;
            const fastlaneCountryCode = fastlaneAddress.countryCodeAlpha2 || fastlaneAddress.address?.countryCode;
            const fastlaneRegionCode = fastlaneAddress.region || fastlaneAddress.address?.adminArea1;
            if (window.billingRegionUpdater.regions[fastlaneCountryCode]) {
                Object.entries(window.billingRegionUpdater.regions[fastlaneCountryCode]).each((region) => {
                    const [regionId, regionData] = region;
                    if (regionData.code === fastlaneRegionCode) {
                        magentoAddressRegionId = regionId;
                    }
                })
            }
            const telephone = typeof fastlaneAddress.phoneNumber === 'string'
                ? fastlaneAddress.phoneNumber
                : fastlaneAddress.phoneNumber?.countryCode + fastlaneAddress.phoneNumber?.nationalNumber;
            return {
                'firstname': fastlaneAddress.firstName || fastlaneAddress.name?.firstName,
                'lastname': fastlaneAddress.lastName || fastlaneAddress.name?.lastName,
                'company': fastlaneAddress.company,
                'telephone': telephone,
                'street1': fastlaneAddress.streetAddress || fastlaneAddress.address?.addressLine1,
                'street2': fastlaneAddress.extendedAddress || fastlaneAddress.address?.addressLine2,
                'city': fastlaneAddress.locality || fastlaneAddress.address?.adminArea2,
                'region_id': magentoAddressRegionId,
                'postcode': fastlaneAddress.postalCode || fastlaneAddress.address?.postalCode,
                'country_id': fastlaneCountryCode,
            };
        },
        /**
         * Retrieve shipping address.
         *
         * @returns {{firstName: (string|*), lastName: (string|*), phoneNumber: (string|*), streetAddress: (string|*), postalCode: (string|*), locality: (string|*), company: (string|*), extendedAddress: (string|*), region: string, countryCodeAlpha2: (string|*)}}
         */
        getShippingAddress: function () {
            console.count('getShippingAddress');
            let magentoAddress = {};
            Object.entries(this.shippingAddressFieldsMap).forEach((entry) => {
                const [key, idSelector] = entry;
                magentoAddress[key] = document.getElementById(idSelector)
                    ? document.getElementById(idSelector).value
                    : '';
            });
            let regionCode = '';
            if (window.shippingRegionUpdater.regions[magentoAddress.country_id]) {
                Object.entries(window.shippingRegionUpdater.regions[magentoAddress.country_id]).forEach((entry) => {
                    const [regionId, regionData] = entry;
                    if (regionId === magentoAddress.region_id) {
                        regionCode = regionData.code;
                    }
                });
            }
            return {
                'firstName': magentoAddress.firstname,
                'lastName': magentoAddress.lastname,
                'company': magentoAddress.company,
                'phoneNumber': magentoAddress.telephone,
                'streetAddress': magentoAddress.street1,
                'extendedAddress': magentoAddress.street2,
                'locality': magentoAddress.city,
                'region': regionCode,
                'postalCode': magentoAddress.postcode,
                'countryCodeAlpha2': magentoAddress.country_id,
            };
        },
        /**
         * Render Fastlane payment container.
         */
        renderPaymentContainer: function () {
            const observer = new MutationObserver(function () {
                if (document.querySelector(`#${this.paymentContainerId}`)) {
                    observer.disconnect();
                    this.renderPaymentComponent();
                    if (window.bold.fastlane.memberAuthenticated === true) {
                        this.selectPaymentMethod();
                    }
                }
            }.bind(this));
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        },
        /**
         * Render Fastlane payment component.
         *
         * @return {Promise<void>}
         */
        renderPaymentComponent: async function () {
            console.count('renderPaymentComponent');
            const telephone = document.getElementById(this.billingAddressFieldsMap.telephone).value ?? '';
            const fields = {
                phoneNumber: {
                    prefill: telephone
                }
            };
            const styles = this.fastlaneStyles || {};
            console.log('Render Fastlane Payment Component');
            if (this.fastlanePaymentComponent === null) {
                this.fastlanePaymentComponent = await window.bold.fastlane.instance.FastlanePaymentComponent(
                    {
                        fields,
                        styles
                    }
                );
            }
            const shippingAddress = this.getShippingAddress();
            if (shippingAddress) {
                console.log('Set Fastlane shipping address: ', shippingAddress);
                this.fastlanePaymentComponent.setShippingAddress(shippingAddress);
            }
            await this.fastlanePaymentComponent.render(`#${this.paymentContainerId}`);
        }
    });

    if (!window.boldFastlaneInstance) {
        window.boldFastlaneInstance = new BoldFastlane();
    } else {
        window.boldFastlaneInstance.initialize();
    }
</script>
